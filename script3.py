# requires pandas
import pandas

# define file paths
input_file = "/Users/santiagochang/Desktop/JSB/WBcel235/filtered_output.tsv"
output_file = "/Users/santiagochang/Desktop/JSB/WBcel235/output_filtered_polycistronic.tsv"

# input: filtered data frame generated by script.py
# output: filtered data frame with polycistronic genes omitted
def filter_polycistronic(data_frame):
    # initialize trackers (visited: 0 -> unchecked, 1 -> not polycistronic, -1 -> polycistronic)
    data_frame["!polycistronic"] = 0
    progress = 0
    # iterate through rows of data frame
    for index, row in data_frame.iterrows():
        # print progress in 1% intervals
        if int(index / (len(data_frame) - 1) * 100) == progress:
            print(f'Construction of data frame is {progress}% complete.')
            progress += 1
        # if the row has not been checked
        if row["!polycistronic"] == 0:
            # mark row as checked
            data_frame.at[index, "!polycistronic"] = 1
            # get chromosome
            chrom = row["chromosome"]
            # determine index bounds of strand (depends on + or - strand)
            if row["strand"] == '+':
                start = int((row["cdna_starts"]).split(',')[0])
                end = int((row["cdna_ends"]).split(',')[-1])
            else:
                start = int((row["cdna_starts"]).split(',')[-1])
                end = int((row["cdna_ends"]).split(',')[0])
            # compare against all other unchecked strands in same chromosome
            for index2, row2 in data_frame.iterrows():
                if row2["!polycistronic"] == 0 and row2["chromosome"] == chrom:
                    # determine index bounds of other strands (depends on + or - strand)
                    if row2["strand"] == '+':
                        start2 = int((row2["cdna_starts"]).split(',')[0])
                        end2 = int((row2["cdna_ends"]).split(',')[-1])
                    else:
                        start2 = int((row2["cdna_starts"]).split(',')[-1])
                        end2 = int((row2["cdna_ends"]).split(',')[0])
                    # compare bounds to gauge overlap, marking both as polycistronic if strands overlap
                    if (start2<start<end2) or (start2<end<end2) or (start<start2<end) or (start<end2<end):
                        data_frame.at[index, "!polycistronic"] = -1
                        data_frame.at[index2, "!polycistronic"] = -1
    # return data frame with column indicating polycistronic vs not polycistronic
    return data_frame

# read in input file
input_df = pandas.read_csv(input_file, sep='\t', comment = '#', header = 0)
# filter out polycistronic genes
output_df = filter_polycistronic(input_df)
output_df = output_df[output_df["!polycistronic"] == 1]
output_df = output_df.drop("!polycistronic", axis = 1)
# output to file
output_df.to_csv(output_file, sep = '\t', index = False)